- name: Set hostname if hostname is localhost
  ansible.builtin.include_tasks: ../tasks/set_hostname.yml
  when: ansible_hostname  == "localhost"

- name: Create all_hosts file
  delegate_to: localhost
  become: false
  file:
    path: ./files/all_hosts
    state: touch

- name: Get all the hostnames
  delegate_to: localhost
  become: false
  ansible.builtin.lineinfile:
    path: ./files/all_hosts
    line: "{{ inventory_hostname }} {{ ansible_hostname }}"
    state: present
    
- name: Create rollback folder
  delegate_to: localhost
  become: false
  run_once: false  # In case of more hostnames can be set to true to make playbook more swift
  ansible.builtin.file:
    path: files/rollback_files
    state: directory
    mode: '0755'

- name: Make backup for /etc/hosts
  ansible.builtin.fetch:
    src: /etc/hosts
    dest: files/rollback_files/etc_hosts_{{ inventory_hostname }}.bkp
    flat: yes

- name: Load the hosts file
  delegate_to: localhost
  become: false
  ansible.builtin.slurp:
    src: files/all_hosts
  register: hosts_to_add

- name: Add new hosts into /etc/hosts
  ansible.builtin.blockinfile:
    path: /etc/hosts
    marker: "# {mark} ansible added hosts"
    block: "{{ hosts_to_add.content | b64decode }}"

- name: Delete the all_hosts file
  delegate_to: localhost
  become: false
  ansible.builtin.file:
    path: files/all_hosts
    state: absent

- name: Get hostnames for ping
  set_fact:
    list_of_hostnames: "{{ (hosts_to_add.content | b64decode).split('\n') | select | map('split') | map('last') | list }}"

- name: Ping the hostnames
  ansible.builtin.command: "ping -c 1 {{ item }}"
  register: pinged
  loop: "{{ list_of_hostnames }}"
  when: item != ansible_hostname
  ignore_errors: true

- name: Check ping
  ansible.builtin.debug:
    msg: "Ping {{ item.item }} was {{ 'successful' if item.rc is defined and item.rc == 0 else 'not successful'}}"
  loop: "{{ pinged.results }}"
  when: item.item != ansible_hostname

